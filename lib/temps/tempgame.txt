import 'dart:async';
import 'dart:math';
import 'package:flare_flutter/flare_actor.dart';
import 'package:flare_flutter/flare_controls.dart';
import 'package:flutter/material.dart';
import 'package:learning_appfinal/conexion/db_helper.dart';
import 'package:learning_appfinal/others/constans.dart';
import 'package:learning_appfinal/others/state_manager.dart';
import 'package:learning_appfinal/providers/options_provider.dart';
import 'package:learning_appfinal/providers/questions_provider.dart';
import 'package:learning_appfinal/providers/topics_provider.dart';
import 'package:learning_appfinal/views/score.dart';
import 'package:learning_appfinal/widgets/optionsW.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_riverpod/all.dart';

/* class Game extends StatefulWidget {
  final List mydata;
  Game({Key key, @required this.mydata}) : super(key: key);

  @override
  _GameState createState() => _GameState(mydata);
} */
// ignore: must_be_immutable
class Game extends StatefulWidget {
  final int idquestionTopic;
  Game({Key key, this.idquestionTopic}) : super(key: key);

  @override
  _GameState createState() => _GameState(idquestionTopic);
}

class _GameState extends State<Game> {
  final int idquestionTopic;
  _GameState(this.idquestionTopic);
  int numQuestion = 0;
  int idPregunta = 1;
  String pregunta = '';
  List<Option> listaOP = [];
  ////////////////////////////////////////////////////////////////////////
  String animacion = Espera;
  final FlareControls _controlsPersonje = FlareControls();
  final FlareControls _controlsEnemigo = FlareControls();

  Color colortoshow = Colors.indigoAccent;
  Color right = Colors.green;
  Color wrong = Colors.red;
  int marks = 0;
  int i = 1;
  bool disableAnswer = false;
  // extra varibale to iterate
  int j = 1;
  int timer = 30;
  String showtimer = "30";
  //var random_array;

  Map<String, Color> btncolor = {
    "a": Colors.indigoAccent,
    "b": Colors.indigoAccent,
    "c": Colors.indigoAccent,
    "d": Colors.indigoAccent,
  };

  bool canceltimer = false;
  bool questionState = false;

  @override
  void initState() {
    //starttimer();
    //genrandomarray();

    super.initState();
    print('game $idquestionTopic');
    // getQuestionByCategory(idquestionTopic);
  }

  // overriding the setstate function to be called only if mounted
/*   @override
  void setState(fn) {
    if (mounted) {
      super.setState(fn);
    }
  } */

  void starttimer() async {
    const onesec = Duration(seconds: 1);
    Timer.periodic(onesec, (Timer t) {
      setState(() {
        if (timer < 1) {
          t.cancel();
          nextquestion();
        } else if (canceltimer == true) {
          t.cancel();
        } else {
          timer = timer - 1;
        }
        showtimer = timer.toString();
      });
    });
  }

/*   void nextquestion() {
    canceltimer = false;
    timer = 30;
    setState(() {
      if (j < 5) {
        i = random_array[j];
        j++;
      } else {
        /*  Navigator.of(context).pushReplacement(MaterialPageRoute(
          builder: (context) => Score(marks: marks),
        )); */
      }
      btncolor["a"] = Colors.indigoAccent;
      btncolor["b"] = Colors.indigoAccent;
      btncolor["c"] = Colors.indigoAccent;
      btncolor["d"] = Colors.indigoAccent;
      disableAnswer = false;
    });
    starttimer();
  } */

  /* void checkanswer(String k) {
    if (mydata[3][i.toString()] == mydata[2][i.toString()][k]) {
      marks = marks + 5;
      colortoshow = right;
      setState(() {
        animacion = Ataque;
        _controlsPersonje.play(animacion);
        _controlsPersonje.onCompleted(animacion = Espera);
      });
    } else {
      colortoshow = wrong;
      setState(() {
        animacion = Ataque;
        _controlsEnemigo.play(animacion);
        _controlsEnemigo.onCompleted(animacion = Espera);
      });
    }
    setState(() {
      // applying the changed color to the particular button that was selected
      btncolor[k] = colortoshow;
      canceltimer = true;
      disableAnswer = true;
    });
    // nextquestion();
    // changed timer duration to 1 second
    Timer(Duration(seconds: 1), nextquestion);
  }
 */
  void nextquestion() {
    canceltimer = false;
    timer = 30;
    //questionState = false;
    setState(() {
      if (numQuestion < 5) {
        numQuestion++;
      } else {
        print('fin juego');
      }
    });
    //starttimer();
  }

  Widget botonOpcion(String k) {
    return Padding(
      padding: EdgeInsets.symmetric(
        vertical: 10.0,
        horizontal: 20.0,
      ),
      child: MaterialButton(
        //onPressed: () => checkanswer(k),
        onPressed: () => nextquestion(),
        child: Text(
          //mydata[2][i.toString()][k],
          'opcion',
          style: TextStyle(
            color: Colors.white,
            fontFamily: "Alike",
            fontSize: 16.0,
          ),
          maxLines: 1,
        ),
        color: btncolor[k],
        splashColor: Colors.indigo[700],
        highlightColor: Colors.indigo[700],
        minWidth: 200.0,
        height: 45.0,
        shape:
            RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.0)),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    var media = MediaQuery.of(context).size;
    //var questionModule = context.read(questionTopicState).state;
    return Scaffold(
/*       body: FutureBuilder(
        future: getQuestionByCategory(idquestionTopic),
        builder: (BuildContext context, AsyncSnapshot snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (!snapshot.hasData || idPregunta == null) {
            return Center(child: CircularProgressIndicator());
          } else {
            //var ques = snapshot.data;
            return Stack(
              children: [
                Container(
                  child: Image.asset(
                    Escenario1,
                    fit: BoxFit.cover,
                    height: media.height,
                    width: media.width,
                  ),
                ),
                Container(
                  alignment: Alignment.topCenter,
                  child: Text(
                    showtimer,
                    style: TextStyle(
                      fontSize: 35.0,
                      fontWeight: FontWeight.w700,
                      fontFamily: 'Times New Roman',
                      color: Colors.white,
                    ),
                  ),
                ),
                Container(
                  padding: EdgeInsets.only(top: 50.0, left: 125.0),
                  child: questionWidget(context, snapshot),
                ),
                optionsW(
                  context: context,
                  idQ: idPregunta,
                ),
              ],
            );
          }
        },
      ), */
      body: Container(
        child: Stack(
          children: [
            Container(
              child: Image.asset(
                Escenario1,
                fit: BoxFit.cover,
                height: media.height,
                width: media.width,
              ),
            ),
            Container(
              alignment: Alignment.topCenter,
              child: Text(
                showtimer,
                style: TextStyle(
                  fontSize: 35.0,
                  fontWeight: FontWeight.w700,
                  fontFamily: 'Times New Roman',
                  color: Colors.white,
                ),
              ),
            ),
            //container anterior
            //futureOption(idquestionTopic),
/*             Row(
              children: [
                Stack(
                  children: [
                    Container(
                      height: media.height,
                      width: media.width,
                      padding: EdgeInsets.only(top: 50.0),
                      child: FlareActor(
                        Personaje1,
                        animation: animacion,
                        fit: BoxFit.contain,
                        controller: _controlsPersonje,
                      ),
                    ),
                    Container(
                      height: media.height,
                      width: media.width,
                      padding: EdgeInsets.only(left: 10.0, top: 55.0),
                      //alignment: Alignment.bottomCenter,
                      child: FlareActor(
                        Enemigo,
                        animation: animacion,
                        fit: BoxFit.contain,
                        controller: _controlsEnemigo,
                      ),
                    ),
                  ],
                ),
              ],
            ), */
//inicia container
/*             Container(
              padding: EdgeInsets.only(top: 260.0),
              child: FutureBuilder(
                future: getOptionQuestion(idPregunta),
                initialData: [],
                builder: (BuildContext context, AsyncSnapshot snapshot) {
                  return optionWidget(context, snapshot);
                },
              ),
            ), */
          ],
        ),
      ),
    );
  }

/*   Container futureOption(int idtopicq) {
    return Container(
      padding: EdgeInsets.only(top: 50.0, left: 125.0),
      child: FutureBuilder(
        future: getQuestionByCategory(idtopicq),
        initialData: [],
        builder: (BuildContext context, AsyncSnapshot snapshot) {
          return questionWidget(context, snapshot);
        },
      ),
    );
  } */

  Future<List<Question>> getQuestionByCategory(int id) async {
    var db = await copyDB();
    var result = await QuestionProvider().getQuestionCategoryById(db, id);
    result.map((e) {
      idPregunta = e.id;
    });
    //datosO = await OptionProvider().getOptionQuestionById(db, idPregunta);
    //print('son ds $datosO');
    return result;
  }

  Future<List<Option>> getOptionQuestion(int id) async {
    var db = await copyDB();
    var result = await OptionProvider().getOptionQuestionById(db, id);
    listaOP = result;
    print(listaOP);
    return result;
  }

  Widget questionWidget(BuildContext context, AsyncSnapshot snapshot) {
    var values = snapshot.data;
    return ListView.builder(
      itemCount: values == null ? 0 : values.length,
      itemBuilder: (BuildContext context, int index) {
        //if (questionState == false) {
        idPregunta = values[index].id;
        pregunta = values[index].textQ;
        questionState = true;
        getOptionQuestion(idPregunta);
        print(idPregunta);
        //print(op);
        //}
        return Column(
          children: [
            Container(
              child: Text(
                '$pregunta el id es $idPregunta',
                //'${q.textQ}',
                style: TextStyle(color: Colors.white, fontSize: 20.0),
              ),
            ),

/*             Container(
              child: ListView(
                children: listaOP.map<Widget>((option) {
                  return MaterialButton(
                    //onPressed: () => checkanswer(k),
                    onPressed: () => nextquestion(),
                    child: Text(
                      option.textO,
                      style: TextStyle(
                        color: Colors.white,
                        fontFamily: "Alike",
                        fontSize: 16.0,
                      ),
                      maxLines: 1,
                    ),
                    color: Colors.indigo,
                    minWidth: 200.0,
                    height: 45.0,
                  );
                }).toList(),
              ),
            ), */
            //optionWidget(listaOP),

/*             Container(
              padding: EdgeInsets.only(top: 260.0),
              child: FutureBuilder(
                future: getOptionQuestion(values[index].id),
                initialData: [],
                builder: (BuildContext context, AsyncSnapshot snapshot) {
                  return optionWidget(context, snapshot);
                },
              ),
            ), */
          ],
        );
      },
    );
  }

  /* Widget optionWidget(List<Option> values) {
    //var values = snapshot.data;
    return ListView.builder(
      scrollDirection: Axis.horizontal,
      itemCount: values == null ? 0 : values.length,
      itemBuilder: (BuildContext context, int index) {
        return Container(
          padding: EdgeInsets.all(10.0),
          alignment: Alignment.center,
          child: MaterialButton(
            //onPressed: () => checkanswer(k),
            onPressed: () => nextquestion(),
            child: Text(
              //mydata[2][i.toString()][k],
              values[index].textO,
              style: TextStyle(
                color: Colors.white,
                fontFamily: "Alike",
                fontSize: 16.0,
              ),
              maxLines: 1,
            ),
            color: Colors.indigo,
            minWidth: 200.0,
            height: 45.0,
          ),
        );
      },
    );
  } */
}
